[{"C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\index.js":"1","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\App.js":"2","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\services\\DroneService.js":"3","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\ListDrones.js":"4","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\DroneListItem.js":"5","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\FilterController.js":"6","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\DroneGrid.js":"7","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\services\\RadarService.js":"8"},{"size":157,"mtime":1670269351369,"results":"9","hashOfConfig":"10"},{"size":2636,"mtime":1670433891527,"results":"11","hashOfConfig":"10"},{"size":1569,"mtime":1670436106228,"results":"12","hashOfConfig":"10"},{"size":863,"mtime":1670433663327,"results":"13","hashOfConfig":"10"},{"size":1235,"mtime":1670434830658,"results":"14","hashOfConfig":"10"},{"size":2776,"mtime":1670434279295,"results":"15","hashOfConfig":"10"},{"size":285,"mtime":1670433621593,"results":"16","hashOfConfig":"10"},{"size":1812,"mtime":1670433591512,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"1l0v056",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},"C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\index.js",[],[],[],"C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\App.js",["48"],[],"import React, { useEffect, useState } from \"react\";\r\nimport DroneService from \"./services/DroneService\";\r\nimport XMLParser from 'react-xml-parser';\r\nimport ListComponent from \"./components/ListDrones\";\r\nimport FilterController from \"./components/FilterController\";\r\nimport Radar from \"./components/DroneGrid\";\r\nimport RadarService from \"./services/RadarService\";\r\nimport './index.css';\r\n\r\n\r\n//App created by Joel WickstrÃ¶m for Reaktor assignment\r\n\r\nfunction App() {\r\n  const [droneData, setDroneData] = useState([]); //all drones within the radar\r\n  const [insideNDZ, setInsideNDZ] = useState([]); //drones currently within the NDZ\r\n  const [time, setTime] = useState(); //current time of the birdnest touchpoint server\r\n  const [TenMinuteData, setTenMinuteData] = useState([]); //Drones that entered NDZ in the last 10 minutes\r\n\r\n\r\n  useEffect(() => {\r\n    const droneUpdate = async (response) => {\r\n        var xml = await new XMLParser().parseFromString(response) //parse response XML-data to array\r\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp)) //sync server time\r\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, Date.parse(xml.children['1'].attributes.snapshotTimestamp)) //create more coherent drone object to handle data more intuitively\r\n        setDroneData(DroneDataObject) //set list of drones to variable (this is used for coordinate mapping graph)\r\n        setInsideNDZ(FilterController.FilterInsideNDZ(DroneDataObject)) //update drones inside the NDZ\r\n    }\r\n    const updateDroneData = setInterval(()=> { //interval to track drones and changes\r\n      DroneService.XMLDroneData().then(response => {\r\n        droneUpdate(response);\r\n      })\r\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\r\n    return () => {\r\n    clearInterval(updateDroneData);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => { //update radar and ten minute data when drone list is updated\r\n      setTenMinuteData(FilterController.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time))\r\n      RadarService.setupRadar();\r\n      RadarService.updateRadar({droneData});\r\n    }, [droneData])\r\n\r\n \r\n\r\n  return (\r\n    <div>\r\n      <h1>Drones that have violated the No-fly zone (in the last 10 minutes):</h1>\r\n      <ListComponent droneData={TenMinuteData} />\r\n      <h1>Radar</h1>\r\n      <Radar className='radarcanvas' droneData={droneData} />\r\n      <h2>All drones within the radar area:</h2>\r\n      <ListComponent droneData={droneData}/>\r\n      <h2>Drones currently inside NDZ:</h2>\r\n      <ListComponent droneData={insideNDZ} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\services\\DroneService.js",["49"],[],"import axios from 'axios'\r\nimport FilterController from \"../components/FilterController\";\r\n\r\nconst XMLDroneData = () => { //GET request to fetch drone data\r\n  const res = axios //the XML data is fetched from custom proxy, due to CORS-policy\r\n    .get('https://droneproxy.fly.dev/https://assignments.reaktor.com/birdnest/drones')\r\n    .catch(function (error) { \r\n      console.log(error);\r\n      return {};\r\n    });\r\n    return res.then(response => response.data);\r\n};\r\n\r\nconst PilotInformation = async (serialNumber) => { //GET request to fetch pilot information\r\n  const res = await axios\r\n    .get(`https://droneproxy.fly.dev/https://assignments.reaktor.com/birdnest/pilots/${serialNumber}`)\r\n    .catch(function (error) { \r\n      console.log(error);\r\n      return {};\r\n    });\r\n    return await res.data;\r\n};\r\n\r\nconst DroneDataObject = (droneData, time) => { //Creates more coherent drone object for easier data handling (perhaps some other XML to Json library would've done this automatically)\r\n  const obj = []\r\n  Object.keys(droneData).map(drone => \r\n    obj.push(\r\n      {\r\n        serialNumber: droneData[drone].children['0'].value,\r\n        closestToNest: FilterController.distanceToNest(droneData, drone),\r\n        lastSeen: time,\r\n        timeOnList: null,\r\n        x: droneData[drone].children['8'].value,\r\n        y: droneData[drone].children['7'].value,\r\n        pilotInformation: null\r\n      }\r\n    )\r\n  )\r\n  return obj;\r\n};\r\n\r\nexport default {\r\n  XMLDroneData: XMLDroneData,\r\n  DroneDataObject: DroneDataObject,\r\n  PilotInformation: PilotInformation\r\n};","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\ListDrones.js",[],[],"C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\DroneListItem.js",[],[],"C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\FilterController.js",["50","51","52"],[],"import DroneService from \"../services/DroneService\";\r\n\r\nconst distanceToNest = (droneData, drone) => { //simple formula to calculate distance between drone and nest\r\n    return Math.sqrt(Math.pow(250000-droneData[drone].children['8'].value, 2)+Math.pow(250000-droneData[drone].children['7'].value, 2)) //simple formula of distance between two points\r\n};\r\n\r\nconst FilterInsideNDZ = (droneData) => { //filters drones that are within 100m from nest\r\n    const filteredDrones = Object.keys(droneData)\r\n    .filter(drone => droneData[drone].closestToNest < 100000)\r\n    .reduce((cur, drone) => { return Object.assign(cur, { [drone]: droneData[drone] })}, []);\r\n    return filteredDrones\r\n};\r\n\r\nconst TenMinuteFilter = (TenMinuteData, time) => { //filters drones that have last been seen over ten minutes ago\r\n    Object.keys(TenMinuteData).map(obj => {\r\n        TenMinuteData[obj].timeOnList = time - TenMinuteData[obj].lastSeen; //timer starts counting from zero when the drone leaves the NDZ (timer resets to 0 when the drone is in NDZ)\r\n    })\r\n    const result = Object.keys(TenMinuteData).filter(obj => time-TenMinuteData[obj].lastSeen < 600000)\r\n    .reduce((cur, drone) => { return Object.assign(cur, { [drone]: TenMinuteData[drone] })}, []);\r\n    return result;\r\n}\r\n\r\nconst DronesInNDZ10Minutes = (TenMinuteData, droneData, time) => {\r\n    if (droneData.length > 0) {\r\n        Object.keys(droneData)\r\n        .map(drone => {\r\n            TenMinuteData.filter(Boolean)\r\n            if (!TenMinuteData.includes(undefined)) {\r\n                const index = TenMinuteData.findIndex(object => object.serialNumber === droneData[drone].serialNumber)\r\n                if (index === -1) { //Drone isn't in the ten minute buffer list and is therefore added\r\n                    DroneService.PilotInformation(droneData[drone].serialNumber) //Pilot information is fetched as the drone has violated NDZ\r\n                    .then(response => {\r\n                        droneData[drone].pilotInformation = response;\r\n                    })\r\n                    TenMinuteData.push(droneData[drone]);\r\n                } else {\r\n                    TenMinuteData[index].lastSeen = time; //if the drone is in NDZ, the 10 minute timer is reseted\r\n                    if (droneData[drone].closestToNest < TenMinuteData[index].closestToNest) { //Closest recorded distance to the nest is left is saved\r\n                        TenMinuteData[index].closestToNest=droneData[drone].closestToNest\r\n                    }\r\n                }\r\n        }})\r\n    }\r\n    return TenMinuteFilter(TenMinuteData, time);\r\n};\r\n\r\nexport default {\r\n    FilterInsideNDZ: FilterInsideNDZ,\r\n    distanceToNest: distanceToNest,\r\n    DronesInNDZ10Minutes: DronesInNDZ10Minutes,\r\n    TenMinuteFilter: TenMinuteFilter\r\n};","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\components\\DroneGrid.js",["53","54"],[],"import React from \"react\";\r\n\r\nconst Radar = () => { //Component for Radar canvas\r\n    const canvasStyle = {\r\n        border : '1px',\r\n        border : 'solid',\r\n    }\r\n    return(\r\n        <canvas id=\"radarcanvas\" width=\"500\" height=\"500\"></canvas>\r\n    )\r\n}\r\n\r\n\r\nexport default Radar;","C:\\Koodi\\Reaktor\\Reaktor\\birdnest\\src\\services\\RadarService.js",["55","56","57"],[],"\r\nfunction drawPoint(x, y, context) {\r\n    context.save();\r\n    context.fillStyle = '#0000FF';\r\n    context.beginPath();\r\n    context.arc(x, y, 6, 0, 2 * Math.PI, false);\r\n    context.fill();\r\n    context.restore();\r\n  }\r\n\r\nconst updateRadar = ({droneData}) => {\r\n    droneData = droneData.filter(Boolean) //remove possible undefined objects\r\n    var c = document.getElementById(\"radarcanvas\");\r\n    var context = c.getContext(\"2d\");\r\n    context.font = \"14px Courier New\";\r\n    Object.keys(droneData).map(drone => {\r\n        drawPoint(droneData[drone].x/1000, 500 -droneData[drone].y/1000, context) //draw a point presenting a drone in the grid\r\n        context.fillText([droneData[drone].serialNumber], droneData[drone].x/1000 - 55, 500 - droneData[drone].y/1000 + 20); //nametag for the drone\r\n    })\r\n    context.font = \"20px Courier New\";\r\n    context.fillText('No-Fly Zone', 190, 255); //tag in the center of the circle\r\n    context.save();\r\n    context.strokeStyle = '#ff0000'\r\n    context.lineWidth = 3;\r\n    context.beginPath();\r\n    context.arc(250, 250, 100, 0, 2 * Math.PI, false); //NDZ marked with red circle\r\n    context.stroke();\r\n    context.restore();\r\n};\r\n\r\nconst setupRadar = () => { //draw grid\r\n    var c = document.getElementById(\"radarcanvas\");\r\n    var context = c.getContext(\"2d\");\r\n    context.clearRect(0, 0, c.width, c.height);\r\n    const p = 0;\r\n    for (var x = 0; x <= c.width; x += 25) {\r\n        context.moveTo(0.5 + x + p, p);\r\n        context.lineTo(0.5 + x + p, c.height + p);\r\n    }\r\n    for (var x = 0; x <= c.height; x += 25) {\r\n        context.moveTo(p, 0.5 + x + p);\r\n        context.lineTo(c.width + p, 0.5 + x + p);\r\n    }\r\n    context.strokeStyle = \"#ffd9d9\";\r\n    context.stroke()\r\n}\r\n\r\nexport default {\r\n    updateRadar: updateRadar,\r\n    setupRadar: setupRadar\r\n};",{"ruleId":"58","severity":1,"message":"59","line":42,"column":8,"nodeType":"60","endLine":42,"endColumn":19,"suggestions":"61"},{"ruleId":"62","severity":1,"message":"63","line":42,"column":1,"nodeType":"64","endLine":46,"endColumn":3},{"ruleId":"65","severity":1,"message":"66","line":15,"column":40,"nodeType":"67","messageId":"68","endLine":15,"endColumn":42},{"ruleId":"65","severity":1,"message":"66","line":26,"column":20,"nodeType":"67","messageId":"68","endLine":26,"endColumn":22},{"ruleId":"62","severity":1,"message":"63","line":47,"column":1,"nodeType":"64","endLine":52,"endColumn":3},{"ruleId":"69","severity":1,"message":"70","line":4,"column":11,"nodeType":"71","messageId":"72","endLine":4,"endColumn":22},{"ruleId":"73","severity":1,"message":"74","line":6,"column":9,"nodeType":"75","messageId":"76","endLine":6,"endColumn":15},{"ruleId":"65","severity":1,"message":"66","line":16,"column":38,"nodeType":"67","messageId":"68","endLine":16,"endColumn":40},{"ruleId":"77","severity":1,"message":"78","line":40,"column":14,"nodeType":"71","messageId":"79","endLine":40,"endColumn":15},{"ruleId":"62","severity":1,"message":"63","line":48,"column":1,"nodeType":"64","endLine":51,"endColumn":3},"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'TenMinuteData', 'insideNDZ', and 'time'. Either include them or remove the dependency array. You can also do a functional update 'setTenMinuteData(T => ...)' if you only need 'TenMinuteData' in the 'setTenMinuteData' call.","ArrayExpression",["80"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-unused-vars","'canvasStyle' is assigned a value but never used.","Identifier","unusedVar","no-dupe-keys","Duplicate key 'border'.","ObjectExpression","unexpected","no-redeclare","'x' is already defined.","redeclared",{"desc":"81","fix":"82"},"Update the dependencies array to be: [TenMinuteData, droneData, insideNDZ, time]",{"range":"83","text":"84"},[2139,2150],"[TenMinuteData, droneData, insideNDZ, time]"]