{"ast":null,"code":"import DroneService from \"../services/DroneService\";\nconst distanceToNest = (droneData, drone) => {\n  return Math.sqrt(Math.pow(250000 - droneData[drone].children['8'].value, 2) + Math.pow(250000 - droneData[drone].children['7'].value, 2)); //simple formula of distance between two points\n};\n\nconst FilterInsideNDZ = droneData => {\n  const filteredDrones = Object.keys(droneData).filter(drone => droneData[drone].closestToNest < 100000).reduce((cur, drone) => {\n    return Object.assign(cur, {\n      [drone]: droneData[drone]\n    });\n  }, []);\n  return filteredDrones; //return array with drones inside NDZ\n};\n_c = FilterInsideNDZ;\nconst TenMinuteFilter = (TenMinuteData, time) => {\n  Object.keys(TenMinuteData).map(obj => {\n    TenMinuteData[obj].timeOnList = time - TenMinuteData[obj].lastSeen;\n  });\n  const result = Object.keys(TenMinuteData).filter(obj => time - TenMinuteData[obj].lastSeen < 600000).reduce((cur, drone) => {\n    return Object.assign(cur, {\n      [drone]: TenMinuteData[drone]\n    });\n  }, []);\n  return result;\n};\n_c2 = TenMinuteFilter;\nconst DronesInNDZ10Minutes = (TenMinuteData, droneData, time) => {\n  if (droneData.length > 0) {\n    Object.keys(droneData).map(drone => {\n      TenMinuteData.filter(Boolean);\n      if (!TenMinuteData.includes(undefined)) {\n        const index = TenMinuteData.findIndex(object => object.serialNumber === droneData[drone].serialNumber);\n        if (index === -1) {\n          //Drone isn't in the ten minute buffer list and is therefore added\n          DroneService.PilotInformation(droneData[drone].serialNumber).then(response => {\n            droneData[drone].pilotInformation = response;\n          });\n          TenMinuteData.push(droneData[drone]);\n        } else {\n          TenMinuteData[index].lastSeen = time; //if the drone is in NDZ, the 10 minute timer is reseted\n          if (droneData[drone].closestToNest < TenMinuteData[index].closestToNest) {\n            //\n            TenMinuteData[index].closestToNest = droneData[drone].closestToNest;\n          }\n        }\n      }\n    });\n  }\n  return TenMinuteFilter(TenMinuteData, time);\n};\n_c3 = DronesInNDZ10Minutes;\nexport default {\n  FilterInsideNDZ: FilterInsideNDZ,\n  distanceToNest: distanceToNest,\n  DronesInNDZ10Minutes: DronesInNDZ10Minutes,\n  TenMinuteFilter: TenMinuteFilter\n};\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"FilterInsideNDZ\");\n$RefreshReg$(_c2, \"TenMinuteFilter\");\n$RefreshReg$(_c3, \"DronesInNDZ10Minutes\");","map":{"version":3,"names":["DroneService","distanceToNest","droneData","drone","Math","sqrt","pow","children","value","FilterInsideNDZ","filteredDrones","Object","keys","filter","closestToNest","reduce","cur","assign","TenMinuteFilter","TenMinuteData","time","map","obj","timeOnList","lastSeen","result","DronesInNDZ10Minutes","length","Boolean","includes","undefined","index","findIndex","object","serialNumber","PilotInformation","then","response","pilotInformation","push"],"sources":["C:/Koodi/Reaktor/Reaktor/birdnest/src/components/FilterController.js"],"sourcesContent":["import DroneService from \"../services/DroneService\";\r\n\r\nconst distanceToNest = (droneData, drone) => {\r\n    return Math.sqrt(Math.pow(250000-droneData[drone].children['8'].value, 2)+Math.pow(250000-droneData[drone].children['7'].value, 2)) //simple formula of distance between two points\r\n};\r\n\r\nconst FilterInsideNDZ = (droneData) => {\r\n    const filteredDrones = Object.keys(droneData)\r\n    .filter(drone => droneData[drone].closestToNest < 100000)\r\n    .reduce((cur, drone) => { return Object.assign(cur, { [drone]: droneData[drone] })}, []);\r\n    return filteredDrones //return array with drones inside NDZ\r\n};\r\n\r\nconst TenMinuteFilter = (TenMinuteData, time) => {\r\n    Object.keys(TenMinuteData).map(obj => {\r\n        TenMinuteData[obj].timeOnList = time - TenMinuteData[obj].lastSeen;\r\n    })\r\n    const result = Object.keys(TenMinuteData).filter(obj => time-TenMinuteData[obj].lastSeen < 600000)\r\n    .reduce((cur, drone) => { return Object.assign(cur, { [drone]: TenMinuteData[drone] })}, []);\r\n    return result;\r\n}\r\n\r\nconst DronesInNDZ10Minutes = (TenMinuteData, droneData, time) => {\r\n    if (droneData.length > 0) {\r\n        Object.keys(droneData)\r\n        .map(drone => {\r\n            TenMinuteData.filter(Boolean)\r\n            if (!TenMinuteData.includes(undefined)) {\r\n                const index = TenMinuteData.findIndex(object => object.serialNumber === droneData[drone].serialNumber)\r\n                if (index === -1) { //Drone isn't in the ten minute buffer list and is therefore added\r\n                    DroneService.PilotInformation(droneData[drone].serialNumber)\r\n                    .then(response => {\r\n                        droneData[drone].pilotInformation = response;\r\n                    })\r\n                    TenMinuteData.push(droneData[drone]);\r\n                } else {\r\n                    TenMinuteData[index].lastSeen = time; //if the drone is in NDZ, the 10 minute timer is reseted\r\n                    if (droneData[drone].closestToNest < TenMinuteData[index].closestToNest) { //\r\n                        TenMinuteData[index].closestToNest=droneData[drone].closestToNest\r\n                    }\r\n                }\r\n        }})\r\n    }\r\n    return TenMinuteFilter(TenMinuteData, time);\r\n};\r\n\r\nexport default {\r\n    FilterInsideNDZ: FilterInsideNDZ,\r\n    distanceToNest: distanceToNest,\r\n    DronesInNDZ10Minutes: DronesInNDZ10Minutes,\r\n    TenMinuteFilter: TenMinuteFilter\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}