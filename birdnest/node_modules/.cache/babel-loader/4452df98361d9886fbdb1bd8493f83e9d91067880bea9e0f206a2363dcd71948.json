{"ast":null,"code":"var _jsxFileName = \"C:\\\\koodi\\\\Reaktor\\\\birdnest\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DroneService from \"./services/DroneService\";\nimport XMLParser from 'react-xml-parser';\nimport ListComponent from \"./components/ListDrones\";\nimport FilterByDistance from \"./components/FilterByDistance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [droneData, setDroneData] = useState([]);\n  const [insideNDZ, setInsideNDZ] = useState([]);\n  const [time, setTime] = useState();\n  const [TenMinuteData, setTenMinuteData] = useState([]);\n  useEffect(() => {\n    const updateDroneData = setInterval(() => {\n      DroneService.DroneData().then(response => {\n        var xml = new XMLParser().parseFromString(response); //Response XML-data to array\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp));\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, time);\n        setDroneData(DroneDataObject); //set list of drones to variable (this is used for coordinate mapping graph)\n        setInsideNDZ(FilterByDistance.FilterInsideNDZ(DroneDataObject)); //List of drones inside 100m range\n      });\n    }, 100); //Loop every 2 seconds to fetch current drone positions\n    return () => {\n      clearInterval(updateDroneData);\n    };\n  }, []);\n  useEffect(() => {\n    const interval = setInterval(() => {\n      setTenMinuteData(FilterByDistance.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time));\n    }, 2000);\n    return () => {\n      clearInterval(interval);\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time: \", time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drones:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: droneData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside NDZ:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: insideNDZ\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside NDZ (last 10 minutes):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: TenMinuteData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LYX6dBH+a3rv1unG/OAb3RPbSgg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","DroneService","XMLParser","ListComponent","FilterByDistance","App","droneData","setDroneData","insideNDZ","setInsideNDZ","time","setTime","TenMinuteData","setTenMinuteData","updateDroneData","setInterval","DroneData","then","response","xml","parseFromString","Date","parse","children","attributes","snapshotTimestamp","DroneDataObject","FilterInsideNDZ","clearInterval","interval","DronesInNDZ10Minutes"],"sources":["C:/koodi/Reaktor/birdnest/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DroneService from \"./services/DroneService\";\r\nimport XMLParser from 'react-xml-parser';\r\nimport ListComponent from \"./components/ListDrones\";\r\nimport FilterByDistance from \"./components/FilterByDistance\";\r\n\r\nfunction App() {\r\n  const [droneData, setDroneData] = useState([]);\r\n  const [insideNDZ, setInsideNDZ] = useState([]);\r\n  const [time, setTime] = useState();\r\n  const [TenMinuteData, setTenMinuteData] = useState([])\r\n\r\n  useEffect(() => {\r\n    const updateDroneData = setInterval(()=> {\r\n      DroneService.DroneData().then(response => {\r\n        var xml = new XMLParser().parseFromString(response) //Response XML-data to array\r\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp))\r\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, time)\r\n        setDroneData(DroneDataObject) //set list of drones to variable (this is used for coordinate mapping graph)\r\n        setInsideNDZ(FilterByDistance.FilterInsideNDZ(DroneDataObject)) //List of drones inside 100m range\r\n      })\r\n    }, 100); //Loop every 2 seconds to fetch current drone positions\r\n    return () => {\r\n    clearInterval(updateDroneData);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    const interval = setInterval(()=> {\r\n      setTenMinuteData(FilterByDistance.DronesInNDZ10Minutes(TenMinuteData,insideNDZ, time))\r\n    }, 2000);\r\n    return () => {\r\n      clearInterval(interval);\r\n    }\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <p>Time: {time}</p>\r\n      <p>Drones:</p>\r\n      <ListComponent droneData={droneData}/>\r\n      <p>Inside NDZ:</p>\r\n      <ListComponent droneData={insideNDZ} />\r\n      <p>Inside NDZ (last 10 minutes):</p>\r\n      <ListComponent droneData={TenMinuteData} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,gBAAgB,MAAM,+BAA+B;AAAC;AAE7D,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,EAAE;EAClC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMe,eAAe,GAAGC,WAAW,CAAC,MAAK;MACvCd,YAAY,CAACe,SAAS,EAAE,CAACC,IAAI,CAACC,QAAQ,IAAI;QACxC,IAAIC,GAAG,GAAG,IAAIjB,SAAS,EAAE,CAACkB,eAAe,CAACF,QAAQ,CAAC,EAAC;QACpDP,OAAO,CAACU,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,QAAQ,CAAC,GAAG,CAAC,CAACC,UAAU,CAACC,iBAAiB,CAAC,CAAC;QACnE,IAAIC,eAAe,GAAGzB,YAAY,CAACyB,eAAe,CAACP,GAAG,CAACI,QAAQ,CAAC,GAAG,CAAC,CAACA,QAAQ,EAAEb,IAAI,CAAC;QACpFH,YAAY,CAACmB,eAAe,CAAC,EAAC;QAC9BjB,YAAY,CAACL,gBAAgB,CAACuB,eAAe,CAACD,eAAe,CAAC,CAAC,EAAC;MAClE,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC,CAAC,CAAC;IACT,OAAO,MAAM;MACbE,aAAa,CAACd,eAAe,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAENf,SAAS,CAAC,MAAM;IACd,MAAM8B,QAAQ,GAAGd,WAAW,CAAC,MAAK;MAChCF,gBAAgB,CAACT,gBAAgB,CAAC0B,oBAAoB,CAAClB,aAAa,EAACJ,SAAS,EAAEE,IAAI,CAAC,CAAC;IACxF,CAAC,EAAE,IAAI,CAAC;IACR,OAAO,MAAM;MACXkB,aAAa,CAACC,QAAQ,CAAC;IACzB,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN,oBACE;IAAA,wBACE;MAAA,qBAAUnB,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,eACnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc,eACd,QAAC,aAAa;MAAC,SAAS,EAAEJ;IAAU;MAAA;MAAA;MAAA;IAAA,QAAE,eACtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB,QAAC,aAAa;MAAC,SAAS,EAAEE;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eACvC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoC,eACpC,QAAC,aAAa;MAAC,SAAS,EAAEI;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACvC;AAEV;AAAC,GAzCQP,GAAG;AAAA,KAAHA,GAAG;AA2CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}