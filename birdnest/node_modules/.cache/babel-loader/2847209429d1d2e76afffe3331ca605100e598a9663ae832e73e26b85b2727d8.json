{"ast":null,"code":"var _jsxFileName = \"C:\\\\Koodi\\\\Reaktor\\\\Reaktor\\\\birdnest\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DroneService from \"./services/DroneService\";\nimport XMLParser from 'react-xml-parser';\nimport ListComponent from \"./components/ListDrones\";\nimport FilterController from \"./components/FilterController\";\nimport Radar from \"./components/DroneGrid\";\nimport RadarService from \"./services/RadarService\";\nimport './index.css';\nimport DroneDB from \"./services/DroneDB\";\n\n//App created by Joel Wickström for Reaktor assignment\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [droneData, setDroneData] = useState([]); //all drones within the radar\n  const [insideNDZ, setInsideNDZ] = useState([]); //drones currently within the NDZ\n  const [time, setTime] = useState(); //current time of the birdnest touchpoint server\n  const [TenMinuteData, setTenMinuteData] = useState([]); //Drones that entered NDZ in the last 10 minutes\n\n  useEffect(() => {\n    const droneUpdate = async response => {\n      var xml = await new XMLParser().parseFromString(response); //parse response XML-data to array\n\n      setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp)); //sync server time\n\n      var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, Date.parse(xml.children['1'].attributes.snapshotTimestamp)); //create more coherent drone object to handle data more intuitively\n      setDroneData(DroneDataObject); //set list of drones to variable\n      setInsideNDZ(FilterController.FilterInsideNDZ(DroneDataObject)); //update drones inside the NDZ\n    };\n\n    const updateDroneData = setInterval(() => {\n      //interval to track drones and changes\n      DroneService.XMLDroneData().then(response => {\n        droneUpdate(response);\n      });\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\n    return () => {\n      clearInterval(updateDroneData);\n    };\n  }, []);\n\n  //update radar and ten minute data when drone list is updated\n  useEffect(() => {\n    const drones = FilterController.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time);\n    Object.keys(drones).map(drone => {\n      DroneDB.addDrone(drones[drone]);\n    });\n    console.log(DroneDB.listDrones);\n    setTenMinuteData(FilterController.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time));\n    RadarService.setupRadar();\n    RadarService.updateRadar({\n      droneData\n    });\n  }, [droneData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Drones that have violated the No-fly zone (in the last 10 minutes):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: TenMinuteData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Radar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Radar, {\n      className: \"radarcanvas\",\n      droneData: droneData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"All drones within the radar area:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: droneData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Drones currently inside NDZ:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: insideNDZ\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LYX6dBH+a3rv1unG/OAb3RPbSgg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","DroneService","XMLParser","ListComponent","FilterController","Radar","RadarService","DroneDB","App","droneData","setDroneData","insideNDZ","setInsideNDZ","time","setTime","TenMinuteData","setTenMinuteData","droneUpdate","response","xml","parseFromString","Date","parse","children","attributes","snapshotTimestamp","DroneDataObject","FilterInsideNDZ","updateDroneData","setInterval","XMLDroneData","then","clearInterval","drones","DronesInNDZ10Minutes","Object","keys","map","drone","addDrone","console","log","listDrones","setupRadar","updateRadar"],"sources":["C:/Koodi/Reaktor/Reaktor/birdnest/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DroneService from \"./services/DroneService\";\r\nimport XMLParser from 'react-xml-parser';\r\nimport ListComponent from \"./components/ListDrones\";\r\nimport FilterController from \"./components/FilterController\";\r\nimport Radar from \"./components/DroneGrid\";\r\nimport RadarService from \"./services/RadarService\";\r\nimport './index.css';\r\nimport DroneDB from \"./services/DroneDB\";\r\n\r\n\r\n//App created by Joel Wickström for Reaktor assignment\r\n\r\nfunction App() {\r\n  const [droneData, setDroneData] = useState([]); //all drones within the radar\r\n  const [insideNDZ, setInsideNDZ] = useState([]); //drones currently within the NDZ\r\n  const [time, setTime] = useState(); //current time of the birdnest touchpoint server\r\n  const [TenMinuteData, setTenMinuteData] = useState([]); //Drones that entered NDZ in the last 10 minutes\r\n\r\n\r\n  useEffect(() => {\r\n    const droneUpdate = async (response) => {\r\n        var xml = await new XMLParser().parseFromString(response) //parse response XML-data to array\r\n        \r\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp)) //sync server time\r\n        \r\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, Date.parse(xml.children['1'].attributes.snapshotTimestamp)) //create more coherent drone object to handle data more intuitively\r\n        setDroneData(DroneDataObject) //set list of drones to variable\r\n        setInsideNDZ(FilterController.FilterInsideNDZ(DroneDataObject)) //update drones inside the NDZ\r\n    }\r\n    const updateDroneData = setInterval(()=> { //interval to track drones and changes\r\n      DroneService.XMLDroneData().then(response => {\r\n        droneUpdate(response);\r\n      })\r\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\r\n    return () => {\r\n    clearInterval(updateDroneData);\r\n    };\r\n  }, []);\r\n\r\n\r\n  //update radar and ten minute data when drone list is updated\r\n  useEffect(() => {\r\n      const drones = FilterController.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time)\r\n      Object.keys(drones).map(drone => {\r\n        DroneDB.addDrone(drones[drone])\r\n\r\n      })\r\n      console.log(DroneDB.listDrones)\r\n      setTenMinuteData(FilterController.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time))\r\n      RadarService.setupRadar();\r\n      RadarService.updateRadar({droneData});\r\n    }, [droneData])\r\n\r\n \r\n\r\n  return (\r\n    <div>\r\n      <h1>Drones that have violated the No-fly zone (in the last 10 minutes):</h1>\r\n      <ListComponent droneData={TenMinuteData} />\r\n      <h1>Radar</h1>\r\n      <Radar className='radarcanvas' droneData={droneData} />\r\n      <h2>All drones within the radar area:</h2>\r\n      <ListComponent droneData={droneData}/>\r\n      <h2>Drones currently inside NDZ:</h2>\r\n      <ListComponent droneData={insideNDZ} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}