{"ast":null,"code":"var _jsxFileName = \"C:\\\\Koodi\\\\Reaktor\\\\Reaktor\\\\birdnest\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DroneService from \"./services/DroneService\";\nimport XMLParser from 'react-xml-parser';\nimport ListComponent from \"./components/ListDrones\";\nimport FilterController from \"./components/FilterController\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [droneData, setDroneData] = useState([]); //all drones within the radar\n  const [insideNDZ, setInsideNDZ] = useState([]); //drones currently within the NDZ\n  const [time, setTime] = useState(); //current time of the birdnest touchpoint server\n  const [TenMinuteData, setTenMinuteData] = useState([]); //Drones that entered NDZ in the last 10 minutes\n\n  useEffect(() => {\n    const droneUpdate = async response => {\n      var xml = await new XMLParser().parseFromString(response); //Response XML-data to array\n      setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp));\n      var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, Date.parse(xml.children['1'].attributes.snapshotTimestamp));\n      setDroneData(DroneDataObject); //set list of drones to variable (this is used for coordinate mapping graph)\n      setInsideNDZ(FilterController.FilterInsideNDZ(DroneDataObject)); //List of drones inside 100m range\n    };\n\n    const updateDroneData = setInterval(() => {\n      DroneService.XMLDroneData().then(response => {\n        droneUpdate(response);\n      });\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\n    return () => {\n      clearInterval(updateDroneData);\n    };\n  }, []);\n  useEffect(() => {\n    setTenMinuteData(FilterController.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time));\n  }, [droneData]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time: \", time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside NDZ (last 10 minutes):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: TenMinuteData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"All drones:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: droneData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside NDZ:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: insideNDZ\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LYX6dBH+a3rv1unG/OAb3RPbSgg=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","DroneService","XMLParser","ListComponent","FilterController","App","droneData","setDroneData","insideNDZ","setInsideNDZ","time","setTime","TenMinuteData","setTenMinuteData","droneUpdate","response","xml","parseFromString","Date","parse","children","attributes","snapshotTimestamp","DroneDataObject","FilterInsideNDZ","updateDroneData","setInterval","XMLDroneData","then","clearInterval","DronesInNDZ10Minutes"],"sources":["C:/Koodi/Reaktor/Reaktor/birdnest/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DroneService from \"./services/DroneService\";\r\nimport XMLParser from 'react-xml-parser';\r\nimport ListComponent from \"./components/ListDrones\";\r\nimport FilterController from \"./components/FilterController\";\r\n\r\nfunction App() {\r\n  const [droneData, setDroneData] = useState([]); //all drones within the radar\r\n  const [insideNDZ, setInsideNDZ] = useState([]); //drones currently within the NDZ\r\n  const [time, setTime] = useState(); //current time of the birdnest touchpoint server\r\n  const [TenMinuteData, setTenMinuteData] = useState([]); //Drones that entered NDZ in the last 10 minutes\r\n\r\n\r\n  useEffect(() => {\r\n    const droneUpdate = async (response) => {\r\n        var xml = await new XMLParser().parseFromString(response) //Response XML-data to array\r\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp))\r\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, Date.parse(xml.children['1'].attributes.snapshotTimestamp))\r\n        setDroneData(DroneDataObject) //set list of drones to variable (this is used for coordinate mapping graph)\r\n        setInsideNDZ(FilterController.FilterInsideNDZ(DroneDataObject)) //List of drones inside 100m range\r\n    }\r\n    const updateDroneData = setInterval(()=> {\r\n      DroneService.XMLDroneData().then(response => {\r\n        droneUpdate(response);\r\n      })\r\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\r\n    return () => {\r\n    clearInterval(updateDroneData);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n      setTenMinuteData(FilterController.DronesInNDZ10Minutes(TenMinuteData,insideNDZ, time))\r\n  }, [droneData])\r\n\r\n \r\n\r\n  return (\r\n    <div>\r\n      <p>Time: {time}</p>\r\n      <p>Inside NDZ (last 10 minutes):</p>\r\n      <ListComponent droneData={TenMinuteData} />\r\n      <p>All drones:</p>\r\n      <ListComponent droneData={droneData}/>\r\n      <p>Inside NDZ:</p>\r\n      <ListComponent droneData={insideNDZ} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,gBAAgB,MAAM,+BAA+B;AAAC;AAE7D,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;EAChD,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,EAAE,CAAC,CAAC;EACpC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC,CAAC,CAAC;;EAGxDD,SAAS,CAAC,MAAM;IACd,MAAMe,WAAW,GAAG,MAAOC,QAAQ,IAAK;MACpC,IAAIC,GAAG,GAAG,MAAM,IAAId,SAAS,EAAE,CAACe,eAAe,CAACF,QAAQ,CAAC,EAAC;MAC1DJ,OAAO,CAACO,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,QAAQ,CAAC,GAAG,CAAC,CAACC,UAAU,CAACC,iBAAiB,CAAC,CAAC;MACnE,IAAIC,eAAe,GAAGtB,YAAY,CAACsB,eAAe,CAACP,GAAG,CAACI,QAAQ,CAAC,GAAG,CAAC,CAACA,QAAQ,EAAEF,IAAI,CAACC,KAAK,CAACH,GAAG,CAACI,QAAQ,CAAC,GAAG,CAAC,CAACC,UAAU,CAACC,iBAAiB,CAAC,CAAC;MAC1If,YAAY,CAACgB,eAAe,CAAC,EAAC;MAC9Bd,YAAY,CAACL,gBAAgB,CAACoB,eAAe,CAACD,eAAe,CAAC,CAAC,EAAC;IACpE,CAAC;;IACD,MAAME,eAAe,GAAGC,WAAW,CAAC,MAAK;MACvCzB,YAAY,CAAC0B,YAAY,EAAE,CAACC,IAAI,CAACb,QAAQ,IAAI;QAC3CD,WAAW,CAACC,QAAQ,CAAC;MACvB,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACV,OAAO,MAAM;MACbc,aAAa,CAACJ,eAAe,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EAEN1B,SAAS,CAAC,MAAM;IACZc,gBAAgB,CAACT,gBAAgB,CAAC0B,oBAAoB,CAAClB,aAAa,EAACJ,SAAS,EAAEE,IAAI,CAAC,CAAC;EAC1F,CAAC,EAAE,CAACJ,SAAS,CAAC,CAAC;EAIf,oBACE;IAAA,wBACE;MAAA,qBAAUI,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,eACnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoC,eACpC,QAAC,aAAa;MAAC,SAAS,EAAEE;IAAc;MAAA;MAAA;MAAA;IAAA,QAAG,eAC3C;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB,QAAC,aAAa;MAAC,SAAS,EAAEN;IAAU;MAAA;MAAA;MAAA;IAAA,QAAE,eACtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB,QAAC,aAAa;MAAC,SAAS,EAAEE;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG;EAAA;IAAA;IAAA;IAAA;EAAA,QACnC;AAEV;AAAC,GA1CQH,GAAG;AAAA,KAAHA,GAAG;AA4CZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}