{"ast":null,"code":"var _jsxFileName = \"C:\\\\Koodi\\\\Reaktor\\\\Reaktor\\\\birdnest\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport DroneService from \"./services/DroneService\";\nimport XMLParser from 'react-xml-parser';\nimport ListComponent from \"./components/ListDrones\";\nimport FilterByDistance from \"./components/FilterByDistance\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [droneData, setDroneData] = useState([]);\n  const [insideNDZ, setInsideNDZ] = useState([]);\n  const [time, setTime] = useState();\n  const [TenMinuteData, setTenMinuteData] = useState([]);\n  useEffect(() => {\n    const updateDroneData = setInterval(() => {\n      DroneService.DroneData().then(response => {\n        var xml = new XMLParser().parseFromString(response); //Response XML-data to array\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, time);\n        setDroneData(DroneDataObject); //set list of drones to variable (this is used for coordinate mapping graph)\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp));\n        setInsideNDZ(FilterByDistance.FilterInsideNDZ(DroneDataObject)); //List of drones inside 100m range\n        setTenMinuteData(FilterByDistance.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time));\n      });\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\n    return () => {\n      clearInterval(updateDroneData);\n    };\n  }, []);\n  console.log(TenMinuteData);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Time: \", time]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Drones:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: droneData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside NDZ:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ListComponent, {\n      droneData: insideNDZ\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Inside NDZ (last 10 minutes):\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"LWjsTF8QXIYSw0FJQBQPKmM+3iU=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","DroneService","XMLParser","ListComponent","FilterByDistance","App","droneData","setDroneData","insideNDZ","setInsideNDZ","time","setTime","TenMinuteData","setTenMinuteData","updateDroneData","setInterval","DroneData","then","response","xml","parseFromString","DroneDataObject","children","Date","parse","attributes","snapshotTimestamp","FilterInsideNDZ","DronesInNDZ10Minutes","clearInterval","console","log"],"sources":["C:/Koodi/Reaktor/Reaktor/birdnest/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport DroneService from \"./services/DroneService\";\nimport XMLParser from 'react-xml-parser';\nimport ListComponent from \"./components/ListDrones\";\nimport FilterByDistance from \"./components/FilterByDistance\";\n\nfunction App() {\n  const [droneData, setDroneData] = useState([]);\n  const [insideNDZ, setInsideNDZ] = useState([]);\n  const [time, setTime] = useState();\n  const [TenMinuteData, setTenMinuteData] = useState([])\n\n  useEffect(() => {\n    const updateDroneData = setInterval(()=> {\n      DroneService.DroneData().then(response => {\n        var xml = new XMLParser().parseFromString(response) //Response XML-data to array\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, time)\n        setDroneData(DroneDataObject) //set list of drones to variable (this is used for coordinate mapping graph)\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp))\n        setInsideNDZ(FilterByDistance.FilterInsideNDZ(DroneDataObject)) //List of drones inside 100m range\n        setTenMinuteData(FilterByDistance.DronesInNDZ10Minutes(TenMinuteData,insideNDZ, time))\n      })\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\n    return () => {\n    clearInterval(updateDroneData);\n    };\n  }, []);\n  console.log(TenMinuteData)\n  return (\n    <div>\n      <p>Time: {time}</p>\n      <p>Drones:</p>\n      <ListComponent droneData={droneData}/>\n      <p>Inside NDZ:</p>\n      <ListComponent droneData={insideNDZ} />\n      <p>Inside NDZ (last 10 minutes):</p>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,YAAY,MAAM,yBAAyB;AAClD,OAAOC,SAAS,MAAM,kBAAkB;AACxC,OAAOC,aAAa,MAAM,yBAAyB;AACnD,OAAOC,gBAAgB,MAAM,+BAA+B;AAAC;AAE7D,SAASC,GAAG,GAAG;EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,EAAE;EAClC,MAAM,CAACY,aAAa,EAAEC,gBAAgB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAEtDD,SAAS,CAAC,MAAM;IACd,MAAMe,eAAe,GAAGC,WAAW,CAAC,MAAK;MACvCd,YAAY,CAACe,SAAS,EAAE,CAACC,IAAI,CAACC,QAAQ,IAAI;QACxC,IAAIC,GAAG,GAAG,IAAIjB,SAAS,EAAE,CAACkB,eAAe,CAACF,QAAQ,CAAC,EAAC;QACpD,IAAIG,eAAe,GAAGpB,YAAY,CAACoB,eAAe,CAACF,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,CAACA,QAAQ,EAAEZ,IAAI,CAAC;QACpFH,YAAY,CAACc,eAAe,CAAC,EAAC;QAC9BV,OAAO,CAACY,IAAI,CAACC,KAAK,CAACL,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,CAACG,UAAU,CAACC,iBAAiB,CAAC,CAAC;QACnEjB,YAAY,CAACL,gBAAgB,CAACuB,eAAe,CAACN,eAAe,CAAC,CAAC,EAAC;QAChER,gBAAgB,CAACT,gBAAgB,CAACwB,oBAAoB,CAAChB,aAAa,EAACJ,SAAS,EAAEE,IAAI,CAAC,CAAC;MACxF,CAAC,CAAC;IACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;IACV,OAAO,MAAM;MACbmB,aAAa,CAACf,eAAe,CAAC;IAC9B,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;EACNgB,OAAO,CAACC,GAAG,CAACnB,aAAa,CAAC;EAC1B,oBACE;IAAA,wBACE;MAAA,qBAAUF,IAAI;IAAA;MAAA;MAAA;MAAA;IAAA,QAAK,eACnB;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAc,eACd,QAAC,aAAa;MAAC,SAAS,EAAEJ;IAAU;MAAA;MAAA;MAAA;IAAA,QAAE,eACtC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAkB,eAClB,QAAC,aAAa;MAAC,SAAS,EAAEE;IAAU;MAAA;MAAA;MAAA;IAAA,QAAG,eACvC;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAoC;EAAA;IAAA;IAAA;IAAA;EAAA,QAChC;AAEV;AAAC,GAhCQH,GAAG;AAAA,KAAHA,GAAG;AAkCZ,eAAeA,GAAG;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}