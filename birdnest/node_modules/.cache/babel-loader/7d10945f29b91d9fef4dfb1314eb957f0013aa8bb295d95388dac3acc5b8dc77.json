{"ast":null,"code":"import _regeneratorRuntime from\"C:/Koodi/Reaktor/Reaktor/birdnest/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";import _asyncToGenerator from\"C:/Koodi/Reaktor/Reaktor/birdnest/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _slicedToArray from\"C:/Koodi/Reaktor/Reaktor/birdnest/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import React,{useEffect,useState}from\"react\";import DroneService from\"./services/DroneService\";import XMLParser from'react-xml-parser';import ListComponent from\"./components/ListDrones\";import FilterController from\"./components/FilterController\";import Radar from\"./components/DroneGrid\";import RadarService from\"./services/RadarService\";import'./index.css';//App created by Joel Wickström for Reaktor assignment\nimport{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),droneData=_useState2[0],setDroneData=_useState2[1];//all drones within the radar\nvar _useState3=useState([]),_useState4=_slicedToArray(_useState3,2),insideNDZ=_useState4[0],setInsideNDZ=_useState4[1];//drones currently within the NDZ\nvar _useState5=useState(),_useState6=_slicedToArray(_useState5,2),time=_useState6[0],setTime=_useState6[1];//current time of the birdnest touchpoint server\nvar _useState7=useState([]),_useState8=_slicedToArray(_useState7,2),TenMinuteData=_useState8[0],setTenMinuteData=_useState8[1];//Drones that entered NDZ in the last 10 minutes\nuseEffect(function(){var droneUpdate=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(response){var xml,DroneDataObject;return _regeneratorRuntime().wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return new XMLParser().parseFromString(response);case 2:xml=_context.sent;//parse response XML-data to array\nsetTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp));//sync server time\nDroneDataObject=DroneService.DroneDataObject(xml.children['1'].children,Date.parse(xml.children['1'].attributes.snapshotTimestamp));//create more coherent drone object to handle data more intuitively\nsetDroneData(DroneDataObject);//set list of drones to variable (this is used for coordinate mapping graph)\nsetInsideNDZ(FilterController.FilterInsideNDZ(DroneDataObject));//update drones inside the NDZ\ncase 7:case\"end\":return _context.stop();}}},_callee);}));return function droneUpdate(_x){return _ref.apply(this,arguments);};}();var updateDroneData=setInterval(function(){//interval to track drones and changes\nDroneService.XMLDroneData().then(function(response){droneUpdate(response);});},2000);//Loop every 2 seconds to fetch current drone positions\nreturn function(){clearInterval(updateDroneData);};},[]);useEffect(function(){//update radar and ten minute data when drone list is updated\nsetTenMinuteData(FilterController.DronesInNDZ10Minutes(TenMinuteData,insideNDZ,time));RadarService.setupRadar();RadarService.updateRadar({droneData:droneData});},[droneData]);return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Drones that have violated the No-fly zone (in the last 10 minutes):\"}),/*#__PURE__*/_jsx(ListComponent,{droneData:TenMinuteData}),/*#__PURE__*/_jsx(\"h1\",{children:\"Radar\"}),/*#__PURE__*/_jsx(Radar,{className:\"radarcanvas\",droneData:droneData}),/*#__PURE__*/_jsx(\"h2\",{children:\"All drones within the radar area:\"}),/*#__PURE__*/_jsx(ListComponent,{droneData:droneData}),/*#__PURE__*/_jsx(\"h2\",{children:\"Drones currently inside NDZ:\"}),/*#__PURE__*/_jsx(ListComponent,{droneData:insideNDZ})]});}export default App;","map":{"version":3,"names":["React","useEffect","useState","DroneService","XMLParser","ListComponent","FilterController","Radar","RadarService","App","droneData","setDroneData","insideNDZ","setInsideNDZ","time","setTime","TenMinuteData","setTenMinuteData","droneUpdate","response","parseFromString","xml","Date","parse","children","attributes","snapshotTimestamp","DroneDataObject","FilterInsideNDZ","updateDroneData","setInterval","XMLDroneData","then","clearInterval","DronesInNDZ10Minutes","setupRadar","updateRadar"],"sources":["C:/Koodi/Reaktor/Reaktor/birdnest/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport DroneService from \"./services/DroneService\";\r\nimport XMLParser from 'react-xml-parser';\r\nimport ListComponent from \"./components/ListDrones\";\r\nimport FilterController from \"./components/FilterController\";\r\nimport Radar from \"./components/DroneGrid\";\r\nimport RadarService from \"./services/RadarService\";\r\nimport './index.css';\r\n\r\n\r\n//App created by Joel Wickström for Reaktor assignment\r\n\r\nfunction App() {\r\n  const [droneData, setDroneData] = useState([]); //all drones within the radar\r\n  const [insideNDZ, setInsideNDZ] = useState([]); //drones currently within the NDZ\r\n  const [time, setTime] = useState(); //current time of the birdnest touchpoint server\r\n  const [TenMinuteData, setTenMinuteData] = useState([]); //Drones that entered NDZ in the last 10 minutes\r\n\r\n\r\n  useEffect(() => {\r\n    const droneUpdate = async (response) => {\r\n        var xml = await new XMLParser().parseFromString(response) //parse response XML-data to array\r\n        setTime(Date.parse(xml.children['1'].attributes.snapshotTimestamp)) //sync server time\r\n        var DroneDataObject = DroneService.DroneDataObject(xml.children['1'].children, Date.parse(xml.children['1'].attributes.snapshotTimestamp)) //create more coherent drone object to handle data more intuitively\r\n        setDroneData(DroneDataObject) //set list of drones to variable (this is used for coordinate mapping graph)\r\n        setInsideNDZ(FilterController.FilterInsideNDZ(DroneDataObject)) //update drones inside the NDZ\r\n    }\r\n    const updateDroneData = setInterval(()=> { //interval to track drones and changes\r\n      DroneService.XMLDroneData().then(response => {\r\n        droneUpdate(response);\r\n      })\r\n    }, 2000); //Loop every 2 seconds to fetch current drone positions\r\n    return () => {\r\n    clearInterval(updateDroneData);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => { //update radar and ten minute data when drone list is updated\r\n      setTenMinuteData(FilterController.DronesInNDZ10Minutes(TenMinuteData, insideNDZ, time))\r\n      RadarService.setupRadar();\r\n      RadarService.updateRadar({droneData});\r\n    }, [droneData])\r\n\r\n \r\n\r\n  return (\r\n    <div>\r\n      <h1>Drones that have violated the No-fly zone (in the last 10 minutes):</h1>\r\n      <ListComponent droneData={TenMinuteData} />\r\n      <h1>Radar</h1>\r\n      <Radar className='radarcanvas' droneData={droneData} />\r\n      <h2>All drones within the radar area:</h2>\r\n      <ListComponent droneData={droneData}/>\r\n      <h2>Drones currently inside NDZ:</h2>\r\n      <ListComponent droneData={insideNDZ} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"qXAAA,MAAOA,MAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAOC,aAAY,KAAM,yBAAyB,CAClD,MAAOC,UAAS,KAAM,kBAAkB,CACxC,MAAOC,cAAa,KAAM,yBAAyB,CACnD,MAAOC,iBAAgB,KAAM,+BAA+B,CAC5D,MAAOC,MAAK,KAAM,wBAAwB,CAC1C,MAAOC,aAAY,KAAM,yBAAyB,CAClD,MAAO,aAAa,CAGpB;AAAA,wFAEA,QAASC,IAAG,EAAG,CACb,cAAkCP,QAAQ,CAAC,EAAE,CAAC,wCAAvCQ,SAAS,eAAEC,YAAY,eAAkB;AAChD,eAAkCT,QAAQ,CAAC,EAAE,CAAC,yCAAvCU,SAAS,eAAEC,YAAY,eAAkB;AAChD,eAAwBX,QAAQ,EAAE,yCAA3BY,IAAI,eAAEC,OAAO,eAAgB;AACpC,eAA0Cb,QAAQ,CAAC,EAAE,CAAC,yCAA/Cc,aAAa,eAAEC,gBAAgB,eAAkB;AAGxDhB,SAAS,CAAC,UAAM,CACd,GAAMiB,YAAW,4FAAG,iBAAOC,QAAQ,kKACf,IAAIf,UAAS,EAAE,CAACgB,eAAe,CAACD,QAAQ,CAAC,QAArDE,GAAG,eAAmD;AAC1DN,OAAO,CAACO,IAAI,CAACC,KAAK,CAACF,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,CAACC,UAAU,CAACC,iBAAiB,CAAC,CAAC,CAAC;AAChEC,eAAe,CAAGxB,YAAY,CAACwB,eAAe,CAACN,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,CAACA,QAAQ,CAAEF,IAAI,CAACC,KAAK,CAACF,GAAG,CAACG,QAAQ,CAAC,GAAG,CAAC,CAACC,UAAU,CAACC,iBAAiB,CAAC,CAAC,CAAC;AAC3If,YAAY,CAACgB,eAAe,CAAC,CAAC;AAC9Bd,YAAY,CAACP,gBAAgB,CAACsB,eAAe,CAACD,eAAe,CAAC,CAAC,CAAC;AAAA,sDACnE,kBANKT,YAAW,4CAMhB,CACD,GAAMW,gBAAe,CAAGC,WAAW,CAAC,UAAK,CAAE;AACzC3B,YAAY,CAAC4B,YAAY,EAAE,CAACC,IAAI,CAAC,SAAAb,QAAQ,CAAI,CAC3CD,WAAW,CAACC,QAAQ,CAAC,CACvB,CAAC,CAAC,CACJ,CAAC,CAAE,IAAI,CAAC,CAAE;AACV,MAAO,WAAM,CACbc,aAAa,CAACJ,eAAe,CAAC,CAC9B,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN5B,SAAS,CAAC,UAAM,CAAE;AACdgB,gBAAgB,CAACX,gBAAgB,CAAC4B,oBAAoB,CAAClB,aAAa,CAAEJ,SAAS,CAAEE,IAAI,CAAC,CAAC,CACvFN,YAAY,CAAC2B,UAAU,EAAE,CACzB3B,YAAY,CAAC4B,WAAW,CAAC,CAAC1B,SAAS,CAATA,SAAS,CAAC,CAAC,CACvC,CAAC,CAAE,CAACA,SAAS,CAAC,CAAC,CAIjB,mBACE,oCACE,2FAA4E,cAC5E,KAAC,aAAa,EAAC,SAAS,CAAEM,aAAc,EAAG,cAC3C,6BAAc,cACd,KAAC,KAAK,EAAC,SAAS,CAAC,aAAa,CAAC,SAAS,CAAEN,SAAU,EAAG,cACvD,yDAA0C,cAC1C,KAAC,aAAa,EAAC,SAAS,CAAEA,SAAU,EAAE,cACtC,oDAAqC,cACrC,KAAC,aAAa,EAAC,SAAS,CAAEE,SAAU,EAAG,GACnC,CAEV,CAEA,cAAeH,IAAG"},"metadata":{},"sourceType":"module","externalDependencies":[]}